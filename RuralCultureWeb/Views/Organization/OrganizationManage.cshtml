@using RuralCultureWeb
@{
    //引用的模板页地址
    Layout = "~/Views/Shared/_SecondLevelMenuLayout.cshtml";
}
@{
    //头部模块
    string UserName = string.Empty;
    if (CacheHelper.CacheValue("Account") != null)
        UserName = Convert.ToString(CacheHelper.CacheValue("Account"));
}
@section Head {
    <link href="~/css/ListPage.css" rel="stylesheet" />
    <link href="~/css/OrganizationManage.css" rel="stylesheet" />
    <link href="~/lib/jQueryColorPicker/css/colpick.css" type="text/css" rel="stylesheet" />
    <script src="~/lib/SortableMaster/Sortable.js" type="text/javascript" ></script>
    <script src="~/lib/jQueryColorPicker/js/colpick.js" type="text/javascript"></script>
    <script type="text/javascript">
        var treeMouseDownButton="";
        $(document).ready(function(){
            $(".btnShrinkExpand").click(function(){
                $("#TreeControlContainer").hide();
                $("#TreeControlExpand").show();
                $("#ListContainer").attr("class","ListContainerShrink");
                $("#btnPageSetting").attr("class","btnPageSettingShrink");
            });
            $("#TreeControlExpand").click(function(){
                $("#TreeControlContainer").show();
                $("#TreeControlExpand").hide();
                $("#ListContainer").attr("class","ListContainerExpand");
                $("#btnPageSetting").attr("class","btnPageSettingExpand");
            });
            $(".TreeControl").scroll(function(){
                $("#TreeNodePopMenu").hide();
            });
            $("#btnClosePopMenu").click(function(){
                $("#TreeNodePopMenu").hide();
            });
            $(".el-tree-node__content").mousedown(function(e){
                switch(e.which)
                {
                    //鼠标点击了左键
                    case 1:
                      treeMouseDownButton="left";
                    break;

                    //鼠标点击了中键
                    case 2:
                      treeMouseDownButton="middle";
                    break;
                    
                    //鼠标点击了右键
                    case 3:
                      treeMouseDownButton="right";
                    break;
                }
            });
        });
    </script>
    <script type="text/javascript">
     $(function(){
	        $('#txtColor').colpick({
		        layout:'hex',
		        colorScheme:'dark',
		        submit:0,
		        onChange:function(hsb,hex,rgb,el,bySetColor) {
                    //console.log("show colpick");
			        $(el).css('border-color','#'+hex);
			        // Fill the text box just if the color was set using the picker, and not the colpickSetColor function.
			        if(!bySetColor) $(el).val(hex);
		        }
	        }).keyup(function(){
		        $(this).colpickSetColor(this.value);
	        });
     });
    </script>
}

@{
    //内容模块
}
@section Body {
    <div id="ListPageMain">
        <div id="TreeControlContainer">
            <div class="TreeControl">
                <el-tree
                    ref="tree"
                    :props="props"
                    :load="loadNode"
                    @@node-click="treeNodeClick"
                    @@node-drop="treeNodeDrag"
                    node-key="id"
                    lazy
                    draggable
                >
                </el-tree>
            </div>
            <div class="btnShrinkExpand">
                <i class="el-icon-caret-left"></i>             
            </div>
        </div>
        <div id="TreeControlExpand">
            <i class="el-icon-caret-right"></i>  
        </div>
        <div id="ListContainer" class="ListContainerExpand">
            <div class="Control">
                <div id="txtSearch">
                    <input type="text" v-model="searchWhere" placeholder="请输入关键字" class="inputText" />
                    <div title="点击搜索" @@click="search" class="btnSearch">
                        <img class="Icon" src="~/images/searchIcon.png" />
                    </div>
                </div>
                <div @@click="showDialog" id="btnPageSetting" class="btnPageSettingExpand" >
                    <img class="Icon" src="~/images/setting.png" />
                </div>
                <!--批量导出按钮-->
                <div @@click="exportExcel" id="btnBatchExport">批量导出</div>
                <!--/批量导出按钮-->
                <!--添加按钮-->
                <div @@click="showEditDialog" title="添加数据" id="btnAddData">
                    <img class="Icon" src="~/images/addIcon.png" />
                    <div class="Text">新增</div>
                </div>
                <!--/添加按钮-->
                <!--删除按钮-->
                <div @@click="batchDeleteOrganization" title="批量删除数据" id="btnDelete">
                    <i class="el-icon-delete Icon"></i>
                    <div class="Text">删除</div>
                </div>
                <!--/删除按钮-->
            </div>
            <div id="Table-Container">
                <el-table 
                    :data="pageData"
                    :empty-text="emptyText"
                    ref="multipleTable" 
                    @@selection-change="handleSelectionChange"
                    height="65vh" 
                    style="width: 100%" >
                    <el-table-column type="selection" width="55"></el-table-column>
                    <el-table-column 
                       v-for="(item, index) in dynamicColumns"
                       :key="index"
                       :prop="item.prop"
                       :label="item.label"
                    >
                        <template slot="header" slot-scope="scope">
                            {{item.label}}{{item.orderMethod=='ASC'?'&#8593;':item.orderMethod=='DESC'?'&#8595;':''}}
                        </template>
                        <template slot-scope="scope">
                            <el-tooltip :content="scope.row[item.prop]" placement="top" effect="light">
                                <span style="display: -webkit-box;text-overflow: ellipsis;overflow: hidden;-webkit-line-clamp: 2;-webkit-box-orient: vertical;white-space: pre-line;">
                                    {{ scope.row[item.prop] }}
                                </span>
                            </el-tooltip>
                        </template>
                   </el-table-column>
                   <el-table-column fixed="left" label="操作" width="160">
                       <template slot-scope="scope">                           
                           <el-button title="编辑" @@click="showEditData(scope.row)" size="mini" type="primary" icon="el-icon-edit" circle></el-button>
                           <el-button title="删除" @@click="listDeleteItem(scope.row)" size="mini" type="danger" icon="el-icon-delete" circle></el-button>
                       </template>
                    </el-table-column>
                </el-table>
            </div>
            <div class="Page-Container">
                <el-pagination
                   class="Pagination"
                   background
                   :total="recordCount"
                   :page-size="pageSize"
                   :page-count="pageCount"
                   :current-page="pageIndex"
                   @@current-change="changePage"
                   @@size-change="changePageSize"
                   layout="total, sizes, prev, pager, next, jumper"
                >
                </el-pagination>
            </div>
        </div>
        <!--树控件弹出菜单-->
        <div id="TreeNodePopMenu">
            <div @@click="popMenuRefreshTree" class="MenuItem">
                <i class="el-icon-refresh"></i>刷新数据
            </div>
            <div @@click="showEditTreeNodeDialog" class="MenuItem">
                <i class="el-icon-circle-plus"></i>添加数据
            </div>
            <div @@click="popMenuDeleteTree" class="MenuItemRed">
                <i class="el-icon-delete-solid"></i>删除数据
            </div>
            <div @@click="popMenuEditByTreeControl" class="MenuItem">
                <i class="el-icon-edit-outline"></i>修改数据
            </div>
            <div id="btnClosePopMenu" class="MenuItemRed">
                <i class="el-icon-circle-close"></i>关闭菜单
            </div>
        </div>
        <!--/树控件弹出菜单-->
        <!--弹出对话框-->
        <el-dialog title="属性调整" custom-class="elDialog" :visible.sync="dialogIsShow">
            <div class="elDialog-mainPanel">
                <table class="mainTable">
                    <thead>
                        <tr>
                            <th>属性名称</th>
                            <th>显示/隐藏</th>
                            <th>排序</th>
                        </tr>
                    </thead>
                </table>
                <div id="columnFieldContainer">
                    <ul id="columnFieldList" ref="columnFieldList">
                        <li v-for="(item,index) in editTableColumns" :key="index" >
                            <table>
                                <tr>
                                    <td>
                                        {{item.showName}}
                                        <input type="hidden" class="hideColumnJson" :value="item.recordId" />
                                    </td>
                                    <td>
                                        <div class="checkItem">
                                            <input class="custom-checkbox" @@click="changePageTableColumnIsShow(index)" :id="'chkDialogItem'+index" :checked="item.isShow=='1'?'checked':''" type="checkbox" />                                        
                                            <label :for="'chkDialogItem'+index"></label>
                                        </div>
                                    </td>
                                    <td v-if="item.backup03.indexOf('ASC')!=-1" @@click="changeOrderMethod(index)" :id="'btnOrderMethod'+index" class="btnOrderMethod" >
                                        &#8593;
                                    </td>
                                    <td v-else-if="item.backup03.indexOf('DESC')!=-1" @@click="changeOrderMethod(index)" :id="'btnOrderMethod'+index" class="btnOrderMethod" >
                                        &#8595;
                                    </td>
                                    <td v-else @@click="changeOrderMethod(index)" :id="'btnOrderMethod'+index" class="btnOrderMethod" >
                                        &nbsp;
                                    </td>
                                </tr>
                            </table>
                        </li>
                    </ul>
                </div>
                <div id="buttonContainer">
                   <el-button id="btnSave" @@click="savePageTableColumn" type="primary" round >保存设置</el-button>
                </div>
            </div>
        </el-dialog>
        <!--/弹出对话框-->
        <!--添加修改对话框-->
        <el-dialog title="编辑数据" custom-class="elEditDialog" :visible.sync="dialogIsEdit" >
            <div class="elEditDialog-mainPanel">
                <div class="line">
                    <div class="label">
                        上一级
                    </div>
                    <div class="input-container">
                        <el-autocomplete v-model="orgParentName"
                                         id="txtParentOrg"
                                         :fetch-suggestions="querySearchParentOrganization"
                                         @@select="handleSelectParentOrganization"
                                         class="txtInput"
                                         placeholder="请输入上一级组织架构名称" />
                    </div>
                </div>
                <div class="line">
                    <div class="label">
                        <span style="color:red">*</span>架构名称
                    </div>
                    <div class="input-container">
                        <el-input id="txtOrgName" class="txtInput" v-model="orgName" placeholder="请输入组织架构名称"></el-input>
                    </div>
                </div>
                <div class="line">
                    <div class="label">
                        字体颜色
                    </div>
                    <div class="input-container">
                        <input type="text" id="txtColor" :style="'color:'+fontColor" v-model="fontColor" class="txtInput" placeholder="请输入或选择字体颜色" />                       
                    </div>
                    <div class="color-select">
                        <el-color-picker v-model="fontColor" size="mini"/>
                    </div>
                </div>
                <div class="line">
                     <el-switch v-model="isTopOrgaization" inactive-text="是否顶级"></el-switch>
                </div>
                <div class="line">
                    <div class="btnSaveContainer">
                        <el-button @@click="saveOrganization" class="btnSave" type="primary" round>保存修改</el-button>
                    </div>
                </div>
            </div>
        </el-dialog>
        <!--/添加修改对话框-->
        <iframe :src="exportSrc==''?'about:blank':exportSrc" style="display:none"></iframe>
    </div>
}

@{
    //脚本模块
}
@section VueScript {
<script>
    var listPage=new Vue({
        el: "#ListPageMain",
        data:{
            fontColor:'',
            userName:"@UserName",
            isTopOrgaization:false,
            selectedOrgInfo:null,
            orgName:'',
            orgParentName:'',
            dialogIsEdit:false,
            dialogIsShow:false,
            pageData:[],
            treeData:[],
            tableColumns:[],
            editTableColumns:[],
            dynamicColumns:[],
            recordCount:0,
            pageIndex:1,
            pageSize:10,
            SelectionIDStr:'',
            pageName:'OrganizationManage.cshtml',
            tableName:'Organization',
            sortField:'modifiedTime',
            sortMethod:'desc',
            emptyText:'暂无数据',
            searchWhere:'',
            pageCount:0,
            ParentId:'',
            exportSrc:'',
            Action:'Add',
            EditParentId:'',
            props: {
                label: 'name',
                children: 'zones',
                isLeaf: 'leaf'
            },
            parentOrg: null,
            editData:{
                orgId: "",
                parentId: "",
                orgName: "",
                fontColor: "",
                backup01: "",
                backup02: "",
                backup03: "",
                created: "",
                createdTime: "",
                modified: "",
                modifiedTime: ""
            },
            windowWidth: document.body.clientWidth,
            windowHeight: document.body.clientHeight
        },
        mounted:function(){
            var _that = this;
            _that.windowWidth = document.body.clientWidth;
            _that.windowHeight = document.body.clientHeight;
            //console.log("实时屏幕宽度:" + _that.windowWidth);
            ////console.log("实时屏幕高度:" + _that.windowHeight);
            _that.refreshPage();
            _that.autoSize();
            window.onresize = () => {
                return (() => {
                    _that.autoSize();
                    _that.windowWidth = document.body.clientWidth;
                    _that.windowHeight = document.body.clientHeight;
                    //console.log("实时屏幕宽度:" + _that.windowWidth);
                    //console.log("实时屏幕高度:" + _that.windowHeight);
                })();
            };
        },
        methods:{
            listDeleteItem(orgObject){
                this.deleteOrganizationFinal(orgObject.orgId);
            },
            popMenuDeleteTree(){
                this.deleteOrganizationFinal(this.ParentId);
            },
            popMenuRefreshTree(){
                var _that=this;
                _that.refreshNodeBy(_that.ParentId);
                $("#TreeNodePopMenu").hide();
            },
            popMenuEditByTreeControl(){
                var _that=this;
                //console.log("popMenuEditByTreeControl");
                //console.log("_that.editData");
                //console.log(_that.editData);
                _that.showEditData(_that.editData);
                $("#TreeNodePopMenu").hide();
            },
            //树节点拖拽事件
            /**
             * 共四个参数，依次为：
             * 被拖拽节点对应的 Node、
             * 结束拖拽时最后进入的节点、
             * 被拖拽节点的放置位置（before、after、inner）、event
             */
            treeNodeDrag(before,after,inner) 
            {
                var _that = this;
                var parentId = 0;
                var Ealt=new Eject();
                /*//console.log("treeNodeDrag");
                //console.log("before");
                //console.log(before);
                //console.log(before.data);
                //console.log("after");
                //console.log(after);
                //console.log(after.data);
                //console.log("inner");
                //console.log(inner);*/
                if (after.data != null && after.data.parentId != '')
                    parentId = after.data.parentId;
                _that.editData.orgId = before.data.id;
                _that.editData.parentId = parentId;
                _that.editData.orgName = before.data.name;
                _that.editData.modified = _that.userName;
                _that.editData.created = _that.userName;
                apiHelper.saveOrganization(
                    _that.editData,
                    'Edit',
                    function(response){
                        if (response.data.status != 0)
                            Ealt.Etoast('保存组织架构失败,原因[' + response.data.msg + ']', 3);
                        else { 
                            _that.dialogIsEdit = false;
                            _that.refreshNodeBy(parentId);
                        }
                });
            },
            /**
             * 刷新节点
             * refreshNodeBy(0);直接刷新整个树形目录
             * id节点ID
             */
            refreshNodeBy(id){
                let node = this.$refs.tree.getNode(id); // 通过节点id找到对应树节点对象
                //console.log("refreshNodeBy");
                //console.log(node);
                node.loaded = false;
                node.expand(); // 主动调用展开节点方法，重新查询该节点下的所有子节点
            },
            showEditData(data) 
            {
                var _that = this;
                _that.editData = data;
                _that.orgName = data.orgName;
                _that.Action = 'Edit';
                _that.parentOrg = null;
                _that.orgParentName = '';
                _that.fontColor=_that.editData.fontColor;
                if (data.parentId == '0')
                    _that.isTopOrgaization = true;
                else
                    _that.isTopOrgaization = false;
                _that.getOrganizationById(
                    _that.editData.parentId,
                    function() {
                        //console.log("showEditData");
                        //console.log("_that.parentOrg");
                        //console.log(_that.parentOrg);
                        if (_that.parentOrg != null)
                            _that.orgParentName = _that.parentOrg.orgName;
                    }
                );
                _that.dialogIsEdit = true;
            },
            getOrganizationById(OrgId,callback) 
            {
                var _that = this;
                var Ealt=new Eject();
                apiHelper.getOrganizationById(OrgId,
                    function(response) {
                        if (response.data.status != 0)
                            Ealt.Etoast('读取上一级数据出错,原因[' + response.data.msg + ']', 3);
                        else {
                            var resultAry = response.data.result;
                            if (resultAry != null && resultAry.length > 0)
                                _that.parentOrg = response.data.result[0];
                            else
                                _that.parentOrg = null;
                        }
                        //console.log("getOrganizationById");
                        //console.log(response);
                        callback();
                    });
            },
            saveOrganization(){
                var _that = this;
                var Ealt=new Eject();
                if (_that.orgName == '') { 
                    Ealt.Etoast('组织架构名称不能为空',3);
                    $("#txtOrgName").focus();
                    return;
                }
                if (_that.isTopOrgaization == false&&(_that.orgParentName==''||_that.parentOrg==null)) {
                    Ealt.Etoast('如果不是顶级组织架构,请选择上一级组织架构',3);
                    $("#txtParentOrg").focus();
                    return;
                }
                _that.editData.orgName = _that.orgName;
                //console.log("_that.parentOrg");
                //console.log(_that.parentOrg);
                if (_that.isTopOrgaization == false)
                    _that.editData.parentId = _that.parentOrg.orgId;
                else
                    _that.editData.parentId = '0';
                _that.editData.fontColor=_that.fontColor;
                apiHelper.saveOrganization(
                    _that.editData,
                    _that.Action,
                    function(response){
                        if (response.data.status != 0)
                            Ealt.Etoast('保存组织架构失败,原因[' + response.data.msg + ']', 3);
                        else { 
                            _that.dialogIsEdit = false;
                            _that.refreshNodeBy(0);
                        }
                });
            },
            //级联查询组织架构
            querySearchParentOrganization(queryString, callback)
            {
                //console.log("queryString=" + queryString);
                var Ealt=new Eject();
                var list = [];
                if (queryString != "") {
                    apiHelper.SearchOrganizationByName(queryString, function(response) {
                        //console.log(response);
                        var resultAry = response.data.result;
                        if (response.data.status == 0) {
                            if (resultAry != null && resultAry.length > 0) {
                                for (var i = 0; i < resultAry.length; i++) {
                                    list.push({
                                        value: resultAry[i].orgName,
                                        id: resultAry[i].orgId,
                                        item: resultAry[i]
                                    });
                                }
                            }
                            else
                            {
                                list.push({
                                  value:'没有数据',
                                  id:-1,
                                  item:null
                                });
                            }
                        }
                        else
                        {
                            if(response.data.msg!="")
                            {
                                Ealt.Etoast('查询数据出错,原因['+response.data.msg+']',3);
                                list.push({
                                    value:'查询数据出错,原因['+response.data.msg+']',
                                    id:-1,
                                    item:null
                                });
                            }else{
                                Ealt.Etoast('查询数据出错,原因[没有数据]',3);
                                list.push({
                                    value:'查询数据出错,原因[没有数据]',
                                    id:-1,
                                    item:null
                                });
                            }
                        }
                    });
                }
                callback(list);
            },
            handleSelectParentOrganization(selected)
            {
                //console.log("handleSelectParentOrganization");
                this.selectedOrgInfo = selected;
                this.parentOrg = selected.item;
                //console.log(selected);
            },
            showEditTreeNodeDialog(){
                var _that=this;
                var ParentId=_that.editData.parentId;
                _that.dialogIsEdit=true;
                _that.editData.orgId = '';
                _that.editData.parentId = '';
                _that.parentOrg = null;
                _that.orgName = '';
                _that.orgParentName = '';
                _that.isTopOrgaization = false;
                _that.Action = 'Add';
                if(ParentId=='0'||ParentId=='')
                   _that.isTopOrgaization=true;
                else
                   _that.isTopOrgaization=false;
                _that.getOrganizationById(
                    ParentId,
                    function() {
                        //console.log("showEditTreeNodeDialog");
                        //console.log("_that.parentOrg");
                        //console.log(_that.parentOrg);
                        if (_that.parentOrg != null)
                            _that.orgParentName = _that.parentOrg.orgName;
                    }
                );
                _that.dialogIsEdit = true;
                if($("#TreeNodePopMenu").css("display")!="none")
                   $("#TreeNodePopMenu").hide();
            },
            showEditDialog(){
                var _that=this;
                _that.dialogIsEdit=true;
                _that.editData.orgId = '';
                _that.editData.parentId = '';
                _that.parentOrg = null;
                _that.orgName = '';
                _that.orgParentName = '';
                _that.isTopOrgaization = false;
                _that.Action = 'Add';
                _that.fontColor='';
                if($("#TreeNodePopMenu").css("display")!="none")
                   $("#TreeNodePopMenu").hide();
            },
            setTreeNodeTitle(){
                this.$nextTick(() => {
                    $(".el-tree-node__label").each(function(index,element){
                        var html=$(element).html();
                        $(element).attr("title",html);
                    });
                });
            },
            savePageTableColumn(){
                this.updatePageTableColumn();
                self.location.reload();
            },
            updatePageTableColumn(){
                var _that=this;
                _that.$nextTick(() => {
                    var newArray=[];
                    $(".hideColumnJson").each(function(index,element){
                        var recordId=$(element).val();
                        for(var i=0;i<_that.editTableColumns.length;i++){
                            var columnItem=_that.editTableColumns[i];
                            if(columnItem.recordId==recordId)
                            {
                                //console.log("showName:"+columnItem.showName);
                                //console.log("isShow:"+columnItem.isShow);
                                columnItem.orderSequence=index.toString();
                                newArray.push(columnItem);
                            }
                        }
                    });
                    //console.log("newArray");
                    //console.log(newArray);
                    apiHelper.savePageTableColumn(
                        newArray,
                        function(response){
                            //console.log(response);
                            if(response.data.status==0){
                                _that.dialogIsShow=false;
                                _that.refreshPage();
                            }
                        }
                    );
                });
            },
            showDialog(){
                this.dialogIsShow=true;
                this.initSortable();
            },
            initSortable(){
                var _that=this;
                if(_that.editTableColumns!=null&&_that.editTableColumns.length>0){                           
                    _that.$nextTick(() => {
                        //console.log("_that.$refs");
                        //console.log(_that.$refs);
                        var columnFieldListObj=_that.$refs.columnFieldList;
                        //console.log("columnFieldListObj");
                        //console.log(columnFieldListObj);
                        new Sortable(columnFieldListObj,{
                            animation: 150,
                            ghostClass: 'blue-background-class',
                            onEnd:function(evt){

                            }
                        });
                    });
                }
            },
            changePageTableColumnIsShow(index){
                var Ealt=new Eject();
                var IsChecked=$("#chkDialogItem"+index)[0].checked;
                if(this.editTableColumns[index].backup02=='PRIMARY_KEY'){
                    Ealt.Ealert({
                        title: '提示',
                        message: '主键字段必须显示'
                    });
                    $("#chkDialogItem"+index)[0].checked=true;
                    return false;
                }
                this.editTableColumns[index].isShow=IsChecked?'1':'0';
            },
            changeOrderMethod(index){
                var _that=this;
                var orderMethod=this.editTableColumns[index].backup03;
                var columnClickItem=this.editTableColumns[index];
                //console.log("orderMethod="+orderMethod);
                var Ealt=new Eject();
                //console.log("columnClickItem.isShow="+columnClickItem.isShow);
                if(columnClickItem.isShow=="0"||columnClickItem.isShow=="")
                {
                    Ealt.Ealert({
                        title: '提示',
                        message: '只有显示的字段才能排序'
                    });
                    return false;
                }
                if(orderMethod.indexOf("ASC")!=-1){
                   $("#btnOrderMethod"+index).html("&#8595;");
                   this.editTableColumns[index].backup03="DESC";
                }
                else if(orderMethod.indexOf("DESC")!=-1){
                   $("#btnOrderMethod"+index).html("&#8593;");
                   this.editTableColumns[index].backup03="ASC";
                }
                else{
                   $("#btnOrderMethod"+index).html("&#8593;");
                   this.editTableColumns[index].backup03="ASC";
                }
                for(var i=0;i<_that.editTableColumns.length;i++){
                    if(i!=index)
                    {
                       $("#btnOrderMethod"+i).html("&nbsp;");
                       _that.editTableColumns[i].backup03="";
                    }
                }
                _that.sortField=_that.editTableColumns[index].fieldName;
                _that.sortMethod=_that.editTableColumns[index].backup03;
                for(var j=0;j<_that.dynamicColumns.length;j++){
                    if(_that.dynamicColumns[j].prop.toLowerCase().trim()==_that.sortField.toLowerCase().trim())
                       _that.dynamicColumns[j].orderMethod=_that.sortMethod;
                    else
                       _that.dynamicColumns[j].orderMethod="";
                }
                _that.savePageTableColumn();
            },
            refreshPage(){
                var _that = this;
                //console.log("刷新页面");
                _that.pageIndex=1;
                _that.tableColumns=[];
                _that.editTableColumns=[];
                _that.dynamicColumns=[];
                _that.pageData=[];
                _that.initEditPageColumn();
                _that.initPageData();
                _that.refreshNodeBy(0);
            },
            refreshDataPage(){
                var _that = this;
                //console.log("刷新页面");
                _that.pageIndex=1;
                _that.tableColumns=[];
                _that.editTableColumns=[];
                _that.dynamicColumns=[];
                _that.pageData=[];
                _that.initEditPageColumn();
                _that.initPageData();
            },
            search(){
                var Ealt=new Eject();
                if (this.searchWhere != '') {
                    this.pageIndex = 1;
                    this.initPageData();
                } else {
                    Ealt.Ealert({
                        title: '提示',
                        message: '请输入搜索内容'
                    });
                }
            },
            getPageData(){
                var _that=this;
                //console.log("getPageData");
                //console.log("_that.ParentId="+_that.ParentId);
                apiHelper.queryPageOrganization({
                    where: _that.searchWhere,
                    parentId: _that.ParentId,
                    pageName:_that.pageName,
                    tableName:_that.tableName,
                    pageIndex: _that.pageIndex,
                    pageSize: _that.pageSize,
                    sortField: _that.sortField,
                    sortMethod: _that.sortMethod
                }, function(response) {
                     if (response.status == 0) {
                        _that.recordCount = response.recordCount;
                        _that.pageCount = response.pageCount;
                        _that.pageData = response.result;
                        _that.tableColumns=response.tableColumn;
                        _that.dynamicColumns=[];
                        if(_that.tableColumns!=null&&_that.tableColumns.length!=null&&_that.tableColumns.length>0)
                        {
                            for(var i=0;i<_that.tableColumns.length;i++){
                                var colItem=_that.tableColumns[i];
                                _that.dynamicColumns.push({
                                    prop:colItem.fieldName,
                                    label:colItem.showName,
                                    orderMethod:colItem.backup03
                                });
                            }
                        }
                        //console.log("_that.dynamicColumns");
                        //console.log(_that.dynamicColumns);
                        //console.log("_that.pageData");
                        //console.log(_that.pageData);
                        //console.log("_that.tableColumns");
                        //console.log(_that.tableColumns);
                        //console.log("_that.recordCount=" + _that.recordCount);
                        //console.log("_that.pageCount=" + _that.pageCount);
                    }
                });
            },
            handleSelectionChange(val){
                var _that = this;
                _that.SelectionIDStr = "";
                for (var i = 0; i < val.length; i++) {
                    _that.SelectionIDStr += val[i].orgId + "-";
                }
                if (_that.SelectionIDStr != "")
                    _that.SelectionIDStr = _that.SelectionIDStr.substr(0, _that.SelectionIDStr.length - 1);
            },
            initPageData(){
                var _that = this;
                this.getPageData();
                this.$nextTick(() => { 
                    _that.setFieldTips();
                });               
            },
            initEditPageColumn(){
                var _that=this;
                apiHelper.getDataByPageNameAndTableName({
                    PageName:_that.pageName,
                    TableName:_that.tableName
                },
                function(response){
                    if (response.status == 0) {
                        var columnData=response.data.result;
                        for(var i=0;i<columnData.length;i++){
                            if(columnData[i].backup03!=""){
                                _that.sortField=columnData[i].fieldName;
                                _that.sortMethod=columnData[i].backup03;
                            }
                        }
                        _that.editTableColumns=columnData;
                    }
                });
            },
            setFieldTips() {
                var _that=this;
                $("th .cell").each(function(index, element) {
                    //console.log(element);
                    var tips = $(element).html();
                    $(element).attr("title", tips);
                });
            },
            changePageSize(pageSize) {
                this.pageIndex = 1;
                this.pageSize = pageSize;
                this.getPageData();
            },
            changePage(pageIndex) {
                this.pageIndex = pageIndex;
                this.getPageData();
            },
            treeNodeClick(args,object,nodeElement){
                //console.log("treeNodeClick");
                //console.log("args");
                //console.log(args);
                //console.log("object");
                //console.log(object);
                //console.log("nodeElement");
                //console.log(nodeElement);
                var _that=this;
                var htmlNode=nodeElement.$refs.node.firstChild;
                var paddingLeft=$(htmlNode).css("padding-left").replace("px","");
                var top=getElementPos(htmlNode).y;
                var left=getElementPos(htmlNode).x;
                top=Math.round(top)+$(htmlNode).height();
                left=Math.round(left)+parseInt(paddingLeft)+6;
                //console.log("paddingLeft="+paddingLeft);
                //console.log("top="+top);
                //console.log("left="+left);
                $("#TreeNodePopMenu").css({
                    "top":top+"px",
                    "left":left+"px"
                });
                //console.log("treeMouseDownButton="+treeMouseDownButton);             
                $("#TreeNodePopMenu").show();
                var tempParentId=object.data.id;
                _that.editData=object.data.object;
                if(object.data!=null&&typeof(tempParentId)!='undefined')
                {
                    //console.log("_that.ParentId="+object.data.id);
                    _that.ParentId=object.data.id;
                }                
                _that.refreshDataPage();
                _that.autoSize();
            },
            //树形节点加载方法
            loadNode(node, resolve){
                var _that=this; 
                var parentId=0;
                //console.log("node");
                //console.log(node);
                if (node.level == 0) {
                    return resolve([{ name: '组织架构',id:0 }]);
                }
                if (node.level>1) {
                    parentId=node.data.id;
                    //console.log("parentId="+parentId);
                }
                _that.readTreeChildNode(parentId,
                        function(nodeData){
                            var resultData=[];
                            //console.log("nodeData");
                            //console.log(nodeData);
                            if(nodeData!=null&&nodeData.length>0){
                                for(var i=0;i<nodeData.length;i++){
                                    resultData.push({
                                        id:nodeData[i].orgId,
                                        parentId:nodeData[i].parentId,
                                        name:nodeData[i].orgName,
                                        object:nodeData[i],
                                        children:[]
                                    });
                                }
                                //console.log("resultData");
                                //console.log(resultData);                                
                                return resolve(resultData);
                            }else{
                                return resolve([]);
                            }
                        }
                   );
            },
            readTreeChildNode(ParentId,callback){
                var _that=this;
                var Ealt=new Eject();
                apiHelper.getOrganizationChildNode(
                    ParentId,
                    function(response){
                        if(response.data.status==0){
                            callback(response.data.result);
                        }else{
                            Ealt.Etoast('读取节点数据出错,原因['+response.data.msg+']',3); 
                        }
                    }
                );
            },
            exportExcel() {
                var _that=this;
                var selectedIDStr = _that.SelectionIDStr==''?'null':_that.SelectionIDStr;
                var searchWhere = _that.searchWhere==''?'null':_that.searchWhere;
                var PName=_that.pageName==''?'null':_that.pageName;
                var tbName=_that.tableName==''?'null':_that.tableName;
                var parentId=_that.ParentId==''?'null':_that.ParentId;
                var Ealt=new Eject();
                //console.log("导出数据");
                if (_that.recordCount <= 0) 
                {
                    Ealt.Ealert({
                        title: '提示',
                        message: '没有数据不能导出'
                    });
                    return false;
                }
                _that.exportSrc = apiHelper.urlBase + '/organization/export/excel?selectedIDStr=' + selectedIDStr + '&where=' + searchWhere+'&pageName='+PName+'&tableName='+tbName+"&ParentId="+parentId;
                //console.log(_that.exportSrc);
            },
            batchDeleteOrganization(){
                var _that=this;
                var Ealt=new Eject();
                //console.log("_that.SelectionIDStr");
                //console.log(_that.SelectionIDStr);
                if(_that.SelectionIDStr==''){
                    Ealt.Ealert({
                        title: '提示',
                        message: '没有选中数据不能删除'
                    });
                }else{
                    _that.deleteOrganizationFinal(_that.SelectionIDStr);
                }
            },
            autoSize(){
                var height=Math.round($(".TreeControl").height())-10;
                var width=Math.round($(".TreeControl").width())-10;
                this.setTreeNodeTitle();
                $(".el-tree").css({
                    "height":height+"px",
                    "min-width":width+"px",
                    "width":"auto !important",
                    "overflow-y":"auto"
                });
                //console.log("width="+width);
                //console.log("height="+height);
                //$(".el-tree")
            },
            deleteOrganizationFinal(deleteIds){
                var _that=this;
                var Ealt=new Eject();
                if($("#TreeNodePopMenu").css("display")!="none")
                   $("#TreeNodePopMenu").hide();
                Ealt.Econfirm({
                    title:'是否删除',
                    message:'确定要删除选中的数据吗?<br/>注意:删除后会进行级联删除,相关的数据也会被删除,请慎重',
                    define:function(){
                        apiHelper.batchDeleteOranization(
                            deleteIds,
                            function(response){
                                if(response.data.status==0){
                                    Ealt.Etoast('删除成功',3);
                                    _that.refreshPage();
                                }else{
                                    Ealt.Etoast('删除失败,原因['+response.data.msg+']',3);
                                }
                            });
                    },
                    cancel:function(){}
                });
            }
        }
    });
</script>
}
