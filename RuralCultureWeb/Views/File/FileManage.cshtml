@{
    //引用的模板页地址
    Layout = "~/Views/Shared/_SecondLevelMenuLayout.cshtml";
}
@{
    //头部模块
    string UrlScheme = Context.Request.IsHttps?"https":"http";
    string UrlHost = Context.Request.Host.Host;
    string Port = string.Empty;
    if (Context.Request.Host.Port != null || Context.Request.Host.Port != 0)
        Port = $":{Context.Request.Host.Port.GetValueOrDefault()}";
    string CurrentUrl = $"{UrlScheme}://{UrlHost}{Port}";
}
@section Head {
    <link href="~/css/ListPage.css" rel="stylesheet" />
    <link href="~/css/FileManage.css" rel="stylesheet" />
    <script src="~/lib/SortableMaster/Sortable.js" type="text/javascript" ></script>
    <script type="text/javascript">

    </script>
}

@{
    //内容模块
}
@section Body {
<div id="ListPageMain">
  <div class="Control">
    <div id="ddlSearchCondition">
      <el-select id="ddlSearch" v-model="searchCondition" placeholder="请选择">
        <el-option v-for="item in options"
                    :key="item.value"
                    :label="item.label"
                    :value="item.value">
        </el-option>
      </el-select>
    </div>
    <div id="txtSearch">
      <input type="text" v-model="searchWhere" placeholder="请输入关键字" class="inputText" />
      <div title="点击搜索" @@click="search" class="btnSearch">
        <img class="Icon" src="~/images/searchIcon.png" />
      </div>
    </div>
    <div @@click="showDialog" id="btnSettingContainer" class="btnDeleteSetting-Container">
         <img class="Icon" src="~/images/setting.png" />
    </div>
    <!--删除按钮-->
    <div title="批量删除文章" @@click="batchDeleteFileInfo" class="btnDeleteFile">
        <i class="el-icon-delete Icon"></i>
        <div class="Text">删除</div>
    </div>
    <!--/删除按钮-->
  </div>
  <div class="Table-Container">
        <el-table 
            :data="pageData"
            :empty-text="emptyText"
            ref="multipleTable" 
            @@selection-change="handleSelectionChange"
            height="65vh" 
            style="width: 100%" >
            <el-table-column type="selection" width="55"></el-table-column>
            <el-table-column 
                v-for="(item, index) in dynamicColumns"
                :key="index"
                :prop="item.prop"
                :label="item.label"
            >
                <template slot="header" slot-scope="scope">
                    {{item.label}}{{item.orderMethod=='ASC'?'&#8593;':item.orderMethod=='DESC'?'&#8595;':''}}
                </template>
                <template slot-scope="scope">
                    <el-tooltip :content="scope.row[item.prop]" placement="top" effect="light">
                        <span style="display: -webkit-box;text-overflow: ellipsis;overflow: hidden;-webkit-line-clamp: 2;-webkit-box-orient: vertical;white-space: pre-line;">
                            {{ scope.row[item.prop] }}
                        </span>
                    </el-tooltip>
                </template>
            </el-table-column>
            <el-table-column fixed="left" label="操作" width="160">
                <template slot-scope="scope">
                    <el-button title="删除" @@click="deleteFile(scope.row.fileId)" size="mini" type="danger" icon="el-icon-delete" circle></el-button>
                </template>
            </el-table-column>
        </el-table>
  </div>
  <div class="Page-Container">
    <el-pagination
        class="Pagination"
        background
        :total="recordCount"
        :page-size="pageSize"
        :page-count="pageCount"
        :current-page="pageIndex"
        @@current-change="changePage"
        @@size-change="changePageSize"
        layout="total, sizes, prev, pager, next, jumper"
    >
    </el-pagination>
  </div>
  <!--弹出对话框-->
  <el-dialog title="属性调整" custom-class="elDialog" :visible.sync="dialogIsShow">
      <div class="elDialog-mainPanel">
          <table class="mainTable">
              <thead>
                  <tr>
                      <th>属性名称</th>
                      <th>显示/隐藏</th>
                      <th>排序</th>
                  </tr>
                </thead>
            </table>
            <div id="columnFieldContainer">
                <ul id="columnFieldList" ref="columnFieldList">
                    <li v-for="(item,index) in editTableColumns" :key="index" >
                        <table>
                            <tr>
                                <td>
                                    {{item.showName}}
                                    <input type="hidden" class="hideColumnJson" :value="item.recordId" />
                                </td>
                                <td>
                                    <div class="checkItem">
                                        <input class="custom-checkbox" @@click="changePageTableColumnIsShow(index)" :id="'chkDialogItem'+index" :checked="item.isShow=='1'?'checked':''" type="checkbox" />                                        
                                        <label :for="'chkDialogItem'+index"></label>
                                    </div>
                                </td>
                                <td v-if="item.backup03.indexOf('ASC')!=-1" @@click="changeOrderMethod(index)" :id="'btnOrderMethod'+index" class="btnOrderMethod" >
                                    &#8593;
                                </td>
                                <td v-else-if="item.backup03.indexOf('DESC')!=-1" @@click="changeOrderMethod(index)" :id="'btnOrderMethod'+index" class="btnOrderMethod" >
                                    &#8595;
                                </td>
                                <td v-else @@click="changeOrderMethod(index)" :id="'btnOrderMethod'+index" class="btnOrderMethod" >
                                    &nbsp;
                                </td>
                            </tr>
                        </table>
                    </li>
                </ul>
            </div>
            <div id="buttonContainer">
                <el-button id="btnSave" @@click="savePageTableColumn" type="primary" round >保存设置</el-button>
            </div>
        </div>
  </el-dialog>
  <!--/弹出对话框-->
</div>
}

@{
    //脚本模块
}
@section VueScript {
  <script>
    var listPage=new Vue({
        el: "#ListPageMain",
        data:{
            SelectionIDStr:'',
            dynamicColumns:[],
            emptyText:'暂无数据',
            pageData:[],
            searchWhere:'',
            searchCondition:'',
            condition:'',
            where:'',
            pageName:'FileManage.cshtml',
            tableName:'FileInfo',
            pageIndex:0,
            pageSize:10,
            recordCount:0,
            pageCount:0,
            dialogIsShow:false,
            windowWidth: document.body.clientWidth,
            windowHeight: document.body.clientHeight,
            sortField:'createdTime',
            sortMethod:'desc',
            editTableColumns:[],
            tableColumns:[],
            options:[
                {
                    label:"文件名称",
                    value:"fileName"
                },
                {
                    label:"源文件名",
                    value:"srcFileName"
                },
                {
                    label:"创建人",
                    value:"created"
                }
            ]
        },
        mounted:function(){
            var _that = this;
            _that.windowWidth = document.body.clientWidth;
            _that.windowHeight = document.body.clientHeight;
            _that.refreshPage();
            console.log("实时屏幕宽度:" + _that.windowWidth);
            console.log("实时屏幕高度:" + _that.windowHeight);
            window.onresize = () => {
                return (() => {
                    _that.windowWidth = document.body.clientWidth;
                    _that.windowHeight = document.body.clientHeight;
                    _that.autoSizeMainDiv();
                    console.log("实时屏幕宽度:" + _that.windowWidth);
                    console.log("实时屏幕高度:" + _that.windowHeight);
                })();
            };
        },
        methods:{
             batchDeleteFileInfo(){
                var _that=this;
                var Ealt=new Eject();
                if(_that.SelectionIDStr==''){
                    Ealt.Ealert({
                        title: '提示',
                        message: '没有选中数据不能删除'
                    });
                }else{
                    _that.deleteFile(_that.SelectionIDStr);
                }
             },
             deleteFile(fileId){
                 var _that = this;
                 var Ealt=new Eject();
                 Ealt.Econfirm({
                        title:'确定删除?',
                        message:'确定要删除文件吗?',
                        define:function(){
                            apiHelper.deleteFile(
                                fileId,
                                function(response){
                                    console.log(response);
                                    if(response.data.status==0){
                                        Ealt.Ealert({
                                            title: '提示',
                                            message: '文件删除成功!'
                                        });
                                        _that.refreshPage();
                                    }
                                }
                            );
                        },
                        cancel:function(){
                        }
                 });
             },
             handleSelectionChange(val){
                var _that = this;
                _that.SelectionIDStr = "";
                for (var i = 0; i < val.length; i++) {
                    _that.SelectionIDStr += val[i].fileId + "-";
                }
                if (_that.SelectionIDStr != "")
                    _that.SelectionIDStr = _that.SelectionIDStr.substr(0, _that.SelectionIDStr.length - 1);
            },
            setFieldTips() {
                var _that=this;
                $("th .cell").each(function(index, element) {
                    console.log(element);
                    var tips = $(element).html();
                    $(element).attr("title", tips);
                });
            },
            refreshPage(){
                var _that = this;
                console.log("刷新页面");
                _that.pageIndex=1;
                _that.tableColumns=[];
                _that.editTableColumns=[];
                _that.dynamicColumns=[];
                _that.pageData=[];
                _that.initEditPageColumn();
                _that.initPageData();               
            },
            initEditPageColumn(){
                var _that=this;
                apiHelper.getDataByPageNameAndTableName({
                    PageName:_that.pageName,
                    TableName:_that.tableName
                },
                function(response){
                    if (response.status == 0) {
                        var columnData=response.data.result;
                        for(var i=0;i<columnData.length;i++){
                            if(columnData[i].backup03!=""){
                                _that.sortField=columnData[i].fieldName;
                                _that.sortMethod=columnData[i].backup03;
                            }
                        }
                        _that.editTableColumns=columnData;
                    }
                });
            },
            getPageData() {
                var _that=this;
                apiHelper.queryPageFile({
                    where: _that.searchWhere,
                    pageName:_that.pageName,
                    tableName:_that.tableName,
                    condition:_that.condition,
                    pageIndex: _that.pageIndex,
                    pageSize: _that.pageSize,
                    sortField: _that.sortField,
                    sortMethod: _that.sortMethod
                }, function(response) {
                    if (response.status == 0) {
                        _that.recordCount = response.recordCount;
                        _that.pageCount = response.pageCount;
                        _that.pageData = response.result;
                        _that.tableColumns=response.tableColumn;
                        _that.dynamicColumns=[];
                        if(_that.tableColumns!=null&&_that.tableColumns.length!=null&&_that.tableColumns.length>0)
                        {
                            for(var i=0;i<_that.tableColumns.length;i++){
                                var colItem=_that.tableColumns[i];
                                _that.dynamicColumns.push({
                                    prop:colItem.fieldName,
                                    label:colItem.showName,
                                    orderMethod:colItem.backup03
                                });
                            }
                        }
                        console.log("_that.dynamicColumns");
                        console.log(_that.dynamicColumns);
                        console.log("_that.pageData");
                        console.log(_that.pageData);
                        console.log("_that.tableColumns");
                        console.log(_that.tableColumns);
                        console.log("_that.recordCount=" + _that.recordCount);
                        console.log("_that.pageCount=" + _that.pageCount);
                    }
                });
            },
            initPageData(){
                var _that = this;
                this.getPageData();
                this.$nextTick(() => { 
                    _that.setFieldTips();
                });               
            },
            setFieldTips() {
                var _that=this;
                $("th .cell").each(function(index, element) {
                    console.log(element);
                    var tips = $(element).html();
                    $(element).attr("title", tips);
                });
            },
            changePageSize(pageSize) {
                this.pageIndex = 1;
                this.pageSize = pageSize;
                this.getPageData();
            },
            changePage(pageIndex) {
                this.pageIndex = pageIndex;
                this.getPageData();
            },
            search(){
                var Ealt=new Eject();
                if (this.searchWhere != '') {
                    this.pageIndex = 1;
                    this.condition = this.searchCondition;
                    this.initPageData();
                } else {
                    Ealt.Ealert({
                        title: '提示',
                        message: '请输入搜索内容'
                    });
                }
            },
            autoSizeMainDiv(){
                $("#app").css({
                    "width": this.windowWidth,
                    "height": this.windowHeight
                });
                //if($(".el-table__empty-block")[0].length>0)
                //{
                //    $(".el-table__empty-block").css({
                //        "width":"100%",
                //        "height":"100%"
                //    });
                //}
                //if($(".el-table__empty-block")[0]==null){
                //    $(".el-table__empty-block").css({
                //        "width":"100%",
                //        "height":"100%"
                //    });
                //}
            },
            showDialog(){
                this.dialogIsShow=true;
                this.initSortable();
            },
            initSortable(){
                var _that=this;
                if(_that.editTableColumns!=null&&_that.editTableColumns.length>0){                           
                    _that.$nextTick(() => {
                        console.log("_that.$refs");
                        console.log(_that.$refs);
                        var columnFieldListObj=_that.$refs.columnFieldList;
                        console.log("columnFieldListObj");
                        console.log(columnFieldListObj);
                        new Sortable(columnFieldListObj,{
                            animation: 150,
                            ghostClass: 'blue-background-class',
                            onEnd:function(evt){

                            }
                        });
                    });
                }
            },
            changePageTableColumnIsShow(index){
                var Ealt=new Eject();
                var IsChecked=$("#chkDialogItem"+index)[0].checked;
                if(this.editTableColumns[index].backup02=='PRIMARY_KEY'){
                    Ealt.Ealert({
                        title: '提示',
                        message: '主键字段必须显示'
                    });
                    $("#chkDialogItem"+index)[0].checked=true;
                    return false;
                }
                this.editTableColumns[index].isShow=IsChecked?'1':'0';
            },
            changeOrderMethod(index){
                var _that=this;
                var orderMethod=this.editTableColumns[index].backup03;
                var columnClickItem=this.editTableColumns[index];
                console.log("orderMethod="+orderMethod);
                var Ealt=new Eject();
                console.log("columnClickItem.isShow="+columnClickItem.isShow);
                if(columnClickItem.isShow=="0"||columnClickItem.isShow=="")
                {
                    Ealt.Ealert({
                        title: '提示',
                        message: '只有显示的字段才能排序'
                    });
                    return false;
                }
                if(orderMethod.indexOf("ASC")!=-1){
                   $("#btnOrderMethod"+index).html("&#8595;");
                   this.editTableColumns[index].backup03="DESC";
                }
                else if(orderMethod.indexOf("DESC")!=-1){
                   $("#btnOrderMethod"+index).html("&#8593;");
                   this.editTableColumns[index].backup03="ASC";
                }
                else{
                   $("#btnOrderMethod"+index).html("&#8593;");
                   this.editTableColumns[index].backup03="ASC";
                }
                for(var i=0;i<_that.editTableColumns.length;i++){
                    if(i!=index)
                    {
                       $("#btnOrderMethod"+i).html("&nbsp;");
                       _that.editTableColumns[i].backup03="";
                    }
                }
                _that.sortField=_that.editTableColumns[index].fieldName;
                _that.sortMethod=_that.editTableColumns[index].backup03;
                for(var j=0;j<_that.dynamicColumns.length;j++){
                    if(_that.dynamicColumns[j].prop.toLowerCase().trim()==_that.sortField.toLowerCase().trim())
                       _that.dynamicColumns[j].orderMethod=_that.sortMethod;
                    else
                       _that.dynamicColumns[j].orderMethod="";
                }
                _that.savePageTableColumn();
            },
            savePageTableColumn(){
                this.updatePageTableColumn();
                self.location.reload();
            },
            updatePageTableColumn(){
                var _that=this;
                _that.$nextTick(() => {
                    var newArray=[];
                    $(".hideColumnJson").each(function(index,element){
                        var recordId=$(element).val();
                        for(var i=0;i<_that.editTableColumns.length;i++){
                            var columnItem=_that.editTableColumns[i];
                            if(columnItem.recordId==recordId)
                            {
                                console.log("showName:"+columnItem.showName);
                                console.log("isShow:"+columnItem.isShow);
                                columnItem.orderSequence=index.toString();
                                newArray.push(columnItem);
                            }
                        }
                    });
                    console.log("newArray");
                    console.log(newArray);
                    apiHelper.savePageTableColumn(
                        newArray,
                        function(response){
                            console.log(response);
                            if(response.data.status==0){
                                _that.dialogIsShow=false;
                                _that.refreshPage();
                            }
                        }
                    );
                });
            }
        }
    });
  </script>
}

